#BlueJ class context
comment0.target=Part1
comment0.text=\r\n\ find\ the\ \u200B\ coldest\u200Bday\ of\ the\ year\ and\ other\ interesting\ facts\ about\ the\ temperature\ and\ humidity\ in\ a\ day.\ \r\n\ To\ test\ your\ program,\ you\ will\ use\ the\ \u200B\ nc_weather\u200Bdata\ folder\ that\ has\ a\ folder\ for\ each\ year\u037E\ \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\n
comment1.params=parser
comment1.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment10.params=
comment10.target=void\ testAverageTemperatureInFile()
comment11.params=parser\ value
comment11.target=double\ averageTemperatureWithHighHumidityInFile(org.apache.commons.csv.CSVParser,\ int)
comment12.params=
comment12.target=void\ testAverageTemperatureWithHighHumidityInFile()
comment2.params=
comment2.target=void\ testColdHourInFile()
comment2.text=bug\:\ in\ this\ situation,\ we\ need\ to\ create\ smallestt\ CSVRecord\ so\ that\ we\ can\ avoid\ some\ annoying\ bugs,\r\n\ \ \ \ also\ it's\ very\ easy\ to\ understand\r\n
comment3.params=
comment3.target=java.lang.String\ fileWithColdestTemperature()
comment4.params=
comment4.target=void\ testFileWithColdestTemperature()
comment4.text=\r\n\ call\ the\ method\ \u200BcoldestHourInFile\u200Bto\ determine\ the\ coldest\ temperature\r\n\ on\ that\ day.\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\n
comment5.params=parser
comment5.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInFile\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(org.apache.commons.csv.CSVParser)
comment6.params=
comment6.target=void\ testLowestHumidityInFile()
comment7.params=
comment7.target=java.lang.String\ lowestHumidityInManyFiles()
comment8.params=
comment8.target=void\ testLowestHumidityInManyFiles()
comment9.params=parser
comment9.target=double\ averageTemperatureInFile(org.apache.commons.csv.CSVParser)
numComments=13
